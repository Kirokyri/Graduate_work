# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'WorkFolderUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



import sys
import os
import yadisk

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import (QApplication, QWidget, QVBoxLayout, QHBoxLayout, QComboBox, 
                             QPushButton, QTextEdit, QMainWindow, QDialog, QLabel, QLineEdit, QFileDialog)
from PyQt5.QtGui import QIcon, QFont
from PyQt5.QtCore import pyqtSlot, pyqtSignal

#from workFolder import WorkFolderFile

class ChangeList():
    def __init__(self):
        self.operation_types = ['Create', 'Delete']
        self.changeList = {}            # Содержит список имен рабочих папок с соответствующим типом операции
        for operation in self.operation_types:
            self.changeList[operation] = []

    def addItem(self, operation:str, item:str):
        self.changeList[operation].append(item)

    def addItems(self, operation:str, items:list):
        for item in items:
            self.addItem(operation, item)

    def return_data(self):
        return self.changeList
    
    def print(self):
        for operation in self.operation_types:
            print(self.changeList.get(operation))

class CustomDialog(QDialog):
    def __init__(self, parent=None):
        super(CustomDialog, self).__init__(parent)
        layout = QVBoxLayout()

        buttonLayout = QHBoxLayout()

        label = QLabel(text="Имя новой папки:")
        self.main_font = QFont('Times New Roman', 14)
        self.setStyleSheet("QLabel { background-color: white }")
        label.setFont(self.main_font)

        self.line_edit = QLineEdit(self)
        self.line_edit.setFont(self.main_font)
        layout.addWidget(label)
        layout.addWidget(self.line_edit)

        okButton = QPushButton("ОК", self)
        cancelButton = QPushButton("Отмена", self)

        okButton.clicked.connect(self.okButtonClicked)
        cancelButton.clicked.connect(self.cancelButtonClicked)

        buttonLayout.addWidget(okButton)
        buttonLayout.addWidget(cancelButton)
        layout.addLayout(buttonLayout)

        self.setLayout(layout)

    def okButtonClicked(self):
        self.accept()

    def cancelButtonClicked(self):
        self.reject()
    
    def get_input_value(self):
        return self.line_edit.text()


class WorkFolderUI(QMainWindow):
    sendDataSignal = pyqtSignal(int, ChangeList)
    def __init__(self, workFolderList: list, parent = None):
        super().__init__(parent=parent)
        self.work_folder_list = workFolderList
        self.change_list = ChangeList()
        self.status = 0                 # 0 - отмена, 1 - ОК
        self.init_ui()

    def init_ui(self):
        self.setObjectName("MainWindow")
        self.resize(447, 557)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")

        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        

        # Кнопка добавления папки
        self.addFolderButton = QtWidgets.QPushButton(self.centralwidget)
        self.addFolderButton.setSizePolicy(sizePolicy)
        self.addFolderButton.setObjectName("addFolderButton")
        self.addFolderButton.setIcon(QIcon('data/icons/plus_icon.png'))
        self.addFolderButton.clicked.connect(self.add_work_folder)
        self.gridLayout.addWidget(self.addFolderButton, 1, 2, 1, 1)

        # Кнопка удаления папки
        self.removeFolderButton = QtWidgets.QPushButton(self.centralwidget)
        self.removeFolderButton.setSizePolicy(sizePolicy)
        self.removeFolderButton.setObjectName("removeFolderButton")
        self.removeFolderButton.setIcon(QIcon('data/icons/minus_icon.png'))
        self.removeFolderButton.clicked.connect(self.remove_work_folder)
        self.gridLayout.addWidget(self.removeFolderButton, 1, 3, 1, 1)
        
        # Кнопка ОК
        self.confirmButton = QtWidgets.QPushButton(self.centralwidget)
        self.confirmButton.setObjectName("confirmButton")
        self.confirmButton.setText('ОК')
        self.confirmButton.clicked.connect(self.confirm)
        self.gridLayout.addWidget(self.confirmButton, 3, 3, 1, 1)

        # Кнопка Отмена
        self.cancelButton = QtWidgets.QPushButton(self.centralwidget)
        self.cancelButton.setObjectName("cancelButton")
        self.cancelButton.setText('Отмена')
        self.cancelButton.clicked.connect(self.cancel)
        self.gridLayout.addWidget(self.cancelButton, 4, 3, 1, 1)
    
        # Панель информации
        self.workFolderInfoList = QtWidgets.QListWidget(self.centralwidget)
        self.workFolderInfoList.setObjectName("workFolderInfoList")
        self.gridLayout.addWidget(self.workFolderInfoList, 1, 1, 4, 1)
        self.setCentralWidget(self.centralwidget)
        self.workFolderInfoList.addItems(self.work_folder_list)


        # Label
        self.label = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 1, 1, 3)
        self.label.setText("Список рабочих папок")

        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        QtCore.QMetaObject.connectSlotsByName(self)

        #self.show()

    @pyqtSlot()
    def confirm(self):
        self.status = 1
        self.sendDataSignal.emit(self.status, self.change_list)
        self.close()
        ''

    @pyqtSlot()
    def cancel(self):
        self.status = 0
        self.sendDataSignal.emit(self.status, self.change_list)
        self.close()
        ''

    # Создание рабочей папки
    @pyqtSlot()
    def add_work_folder(self):
        dialog = CustomDialog(self)
        result = dialog.exec_()
        new_folder_name = ''

        if result == QDialog.Accepted:
            new_folder_name = dialog.get_input_value()

        if new_folder_name == '':
            return
        
        # Здесь просто накапливаются изменения. Все изменения обрабатываются в основном классе.

        self.workFolderInfoList.addItem(new_folder_name)
        self.change_list.addItem('Create', new_folder_name)
        #self.change_list.print()

    @pyqtSlot()
    def remove_work_folder(self):
        item = self.workFolderInfoList.currentItem()
        name = item.text()
        row = self.workFolderInfoList.row(item)
        self.workFolderInfoList.takeItem(row)
        self.change_list.addItem('Delete', name)


def get_full_file_name(file_path):
    file_name, file_extension = os.path.splitext(os.path.basename(file_path))
    return f"{file_name}{file_extension}"


if __name__ == '__main__':
    token = "y0_AgAAAABFAbmLAArAjwAAAADwrN9yWawqWRH8Sp2wcpW6h6sv_4QzKhs"
    y = yadisk.YaDisk(token=token)
    app = QApplication(sys.argv)
    ex = WorkFolderUI(y)
    sys.exit(app.exec_())